
Drivers_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000430  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000430  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006a9  00000000  00000000  00010459  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001a6  00000000  00000000  00010b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003ac  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b0  00000000  00000000  00011058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00011108  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000da5  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000003df  00000000  00000000  00011f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003749  00000000  00000000  00012314  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00015a5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f0  00000000  00000000  00015ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000410 	.word	0x08000410

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000410 	.word	0x08000410

08000170 <MCAL_GPIO_Init>:
* Note			:   Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,
* 				:	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
*===============================================
*/
void MCAL_GPIO_Init(volatile GPIO_t* GPIOx ,GPIO_Pin_Config_t* pinConfig)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
    /*
    Choose the correct control register based on the pin number
    CRL for pin(0 >> 7)
    CRH for pin(8 >> 15)
     */
    CTRL = (pinConfig->pinNumber < 8)? &(GPIOx->CRL) : &(GPIOx->CRH);
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	881b      	ldrh	r3, [r3, #0]
 800017e:	2b07      	cmp	r3, #7
 8000180:	d801      	bhi.n	8000186 <MCAL_GPIO_Init+0x16>
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	e001      	b.n	800018a <MCAL_GPIO_Init+0x1a>
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3304      	adds	r3, #4
 800018a:	60fb      	str	r3, [r7, #12]

    /*Get the needed shift for each pin as each pin takes 4 bits in the register*/
    shift = ((pinConfig->pinNumber % 8) * 4);
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	b2db      	uxtb	r3, r3
 8000192:	f003 0307 	and.w	r3, r3, #7
 8000196:	b2db      	uxtb	r3, r3
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	72fb      	strb	r3, [r7, #11]


    *(CTRL) &= ~(0xF << shift);                /*Clear the bits assigned for the required pin number*/
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	7afa      	ldrb	r2, [r7, #11]
 80001a2:	210f      	movs	r1, #15
 80001a4:	fa01 f202 	lsl.w	r2, r1, r2
 80001a8:	43d2      	mvns	r2, r2
 80001aa:	401a      	ands	r2, r3
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	601a      	str	r2, [r3, #0]

    /*Input pull-up and pull-down have the same configuration code*/
    if(pinConfig->pinMode == GPIO_MODE_INPUT_PD)
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	885b      	ldrh	r3, [r3, #2]
 80001b4:	2b10      	cmp	r3, #16
 80001b6:	d114      	bne.n	80001e2 <MCAL_GPIO_Init+0x72>
    {
        *(CTRL) |= (GPIO_MODE_INPUT_PU << shift);
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	7afa      	ldrb	r2, [r7, #11]
 80001be:	2104      	movs	r1, #4
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	431a      	orrs	r2, r3
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(GPIOx->ODR, pinConfig->pinNumber);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	68db      	ldr	r3, [r3, #12]
 80001ce:	683a      	ldr	r2, [r7, #0]
 80001d0:	8812      	ldrh	r2, [r2, #0]
 80001d2:	4611      	mov	r1, r2
 80001d4:	2201      	movs	r2, #1
 80001d6:	408a      	lsls	r2, r1
 80001d8:	43d2      	mvns	r2, r2
 80001da:	401a      	ands	r2, r3
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	60da      	str	r2, [r3, #12]
        if(pinConfig->pinMode == GPIO_MODE_INPUT_PU)
        {
            SET_BIT(GPIOx->ODR, pinConfig->pinNumber);
        }
    }
}
 80001e0:	e018      	b.n	8000214 <MCAL_GPIO_Init+0xa4>
        *(CTRL) |= (pinConfig->pinMode << shift);  /*Set the mode*/
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	8852      	ldrh	r2, [r2, #2]
 80001ea:	4611      	mov	r1, r2
 80001ec:	7afa      	ldrb	r2, [r7, #11]
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	431a      	orrs	r2, r3
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	601a      	str	r2, [r3, #0]
        if(pinConfig->pinMode == GPIO_MODE_INPUT_PU)
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	885b      	ldrh	r3, [r3, #2]
 80001fc:	2b04      	cmp	r3, #4
 80001fe:	d109      	bne.n	8000214 <MCAL_GPIO_Init+0xa4>
            SET_BIT(GPIOx->ODR, pinConfig->pinNumber);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	8812      	ldrh	r2, [r2, #0]
 8000208:	4611      	mov	r1, r2
 800020a:	2201      	movs	r2, #1
 800020c:	408a      	lsls	r2, r1
 800020e:	431a      	orrs	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	60da      	str	r2, [r3, #12]
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr

0800021e <MCAL_GPIO_ReadPin>:
* @return_value :   Current pin status which can be a value of @ref GPIO_PIN_STATUS.
* Note			:   none.
*===============================================
*/
uint8 MCAL_GPIO_ReadPin(volatile GPIO_t* GPIOx, uint16 pinNumber)
{
 800021e:	b480      	push	{r7}
 8000220:	b085      	sub	sp, #20
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
 8000226:	460b      	mov	r3, r1
 8000228:	807b      	strh	r3, [r7, #2]
    uint8 status;
    status = (READ_BIT(GPIOx->IDR, pinNumber))? (uint8)(GPIO_PIN_HIGH): (uint8)(GPIO_PIN_LOW);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	887a      	ldrh	r2, [r7, #2]
 8000230:	2101      	movs	r1, #1
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	401a      	ands	r2, r3
 8000238:	887b      	ldrh	r3, [r7, #2]
 800023a:	fa22 f303 	lsr.w	r3, r2, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	bf14      	ite	ne
 8000242:	2301      	movne	r3, #1
 8000244:	2300      	moveq	r3, #0
 8000246:	b2db      	uxtb	r3, r3
 8000248:	73fb      	strb	r3, [r7, #15]

    return status;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <MCAL_GPIO_TogglePin>:
* @return_value :   none.
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_TogglePin(volatile GPIO_t* GPIOx, uint16 pinNumber)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	460b      	mov	r3, r1
 8000260:	807b      	strh	r3, [r7, #2]
    TOGGLE_BIT(GPIOx->ODR,  pinNumber);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	887a      	ldrh	r2, [r7, #2]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	405a      	eors	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	60da      	str	r2, [r3, #12]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
	...

08000280 <main>:
/*Functions declarations*/
void clock_init();
void GPIO_init();

int main()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
   volatile int i;
   clock_init();
 8000286:	f000 f831 	bl	80002ec <clock_init>
   GPIO_init();
 800028a:	f000 f843 	bl	8000314 <GPIO_init>

   while (1)
   {

      /*If the button at PA1 is pressed*/
      if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == GPIO_PIN_LOW)
 800028e:	2101      	movs	r1, #1
 8000290:	4814      	ldr	r0, [pc, #80]	; (80002e4 <main+0x64>)
 8000292:	f7ff ffc4 	bl	800021e <MCAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d10b      	bne.n	80002b4 <main+0x34>
      {
        MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN1);      /*Toggle the LED*/
 800029c:	2101      	movs	r1, #1
 800029e:	4812      	ldr	r0, [pc, #72]	; (80002e8 <main+0x68>)
 80002a0:	f7ff ffd9 	bl	8000256 <MCAL_GPIO_TogglePin>

        /*A loop for the button to be a signle press*/
        while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == GPIO_PIN_LOW);
 80002a4:	bf00      	nop
 80002a6:	2101      	movs	r1, #1
 80002a8:	480e      	ldr	r0, [pc, #56]	; (80002e4 <main+0x64>)
 80002aa:	f7ff ffb8 	bl	800021e <MCAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0f8      	beq.n	80002a6 <main+0x26>
      }

      /*If the button at PA13 is pressed*/
      if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN13) == GPIO_PIN_HIGH)
 80002b4:	210d      	movs	r1, #13
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <main+0x64>)
 80002b8:	f7ff ffb1 	bl	800021e <MCAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d103      	bne.n	80002ca <main+0x4a>
      {
        MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN13);      /*Toggle the LED*/
 80002c2:	210d      	movs	r1, #13
 80002c4:	4808      	ldr	r0, [pc, #32]	; (80002e8 <main+0x68>)
 80002c6:	f7ff ffc6 	bl	8000256 <MCAL_GPIO_TogglePin>
      }

      /*Simple delay*/
      for(i = 0;  i < 10000; i++);
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	e002      	b.n	80002d6 <main+0x56>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80002dc:	4293      	cmp	r3, r2
 80002de:	ddf7      	ble.n	80002d0 <main+0x50>
      if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == GPIO_PIN_LOW)
 80002e0:	e7d5      	b.n	800028e <main+0xe>
 80002e2:	bf00      	nop
 80002e4:	40010800 	.word	0x40010800
 80002e8:	40010c00 	.word	0x40010c00

080002ec <clock_init>:
   return 0;
}


void clock_init()
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
   /*Enable GPIO_A*/
   APB2_PERI_CLOCK_EN(APB2_IOPA);
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <clock_init+0x24>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <clock_init+0x24>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]

   /*Enable GPIO_B*/
   APB2_PERI_CLOCK_EN(APB2_IOPB);
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <clock_init+0x24>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a03      	ldr	r2, [pc, #12]	; (8000310 <clock_init+0x24>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000

08000314 <GPIO_init>:


void GPIO_init()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
  GPIO_Pin_Config_t config;
  
  /*PA_13 as floating input*/
  config.pinNumber = GPIO_PIN13;
 800031a:	230d      	movs	r3, #13
 800031c:	80bb      	strh	r3, [r7, #4]
  config.pinMode = GPIO_MODE_INPUT_FLOATING;
 800031e:	2304      	movs	r3, #4
 8000320:	80fb      	strh	r3, [r7, #6]
  MCAL_GPIO_Init(GPIOA, &config);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <GPIO_init+0x58>)
 8000328:	f7ff ff22 	bl	8000170 <MCAL_GPIO_Init>

  /*PA_1 as floating input*/
  config.pinNumber = GPIO_PIN1;
 800032c:	2301      	movs	r3, #1
 800032e:	80bb      	strh	r3, [r7, #4]
  config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8000330:	2304      	movs	r3, #4
 8000332:	80fb      	strh	r3, [r7, #6]
  MCAL_GPIO_Init(GPIOA, &config);
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <GPIO_init+0x58>)
 800033a:	f7ff ff19 	bl	8000170 <MCAL_GPIO_Init>

  /*PB1 as output push-pull 10MHZ*/
  config.pinNumber = GPIO_PIN1;
 800033e:	2301      	movs	r3, #1
 8000340:	80bb      	strh	r3, [r7, #4]
  config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000342:	2301      	movs	r3, #1
 8000344:	80fb      	strh	r3, [r7, #6]
  MCAL_GPIO_Init(GPIOB, &config);
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4619      	mov	r1, r3
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <GPIO_init+0x5c>)
 800034c:	f7ff ff10 	bl	8000170 <MCAL_GPIO_Init>

  /*PB13 as output push-pull 10MHZ*/
  config.pinNumber = GPIO_PIN13;
 8000350:	230d      	movs	r3, #13
 8000352:	80bb      	strh	r3, [r7, #4]
  config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000354:	2301      	movs	r3, #1
 8000356:	80fb      	strh	r3, [r7, #6]
  MCAL_GPIO_Init(GPIOB, &config);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4619      	mov	r1, r3
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <GPIO_init+0x5c>)
 800035e:	f7ff ff07 	bl	8000170 <MCAL_GPIO_Init>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800
 8000370:	40010c00 	.word	0x40010c00

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 f811 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff6b 	bl	8000280 <main>

080003aa <LoopForever>:

LoopForever:
    b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC1_2_IRQHandler>
	...

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	2500      	movs	r5, #0
 80003cc:	4e0c      	ldr	r6, [pc, #48]	; (8000400 <__libc_init_array+0x38>)
 80003ce:	4c0d      	ldr	r4, [pc, #52]	; (8000404 <__libc_init_array+0x3c>)
 80003d0:	1ba4      	subs	r4, r4, r6
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	f000 f81a 	bl	8000410 <_init>
 80003dc:	2500      	movs	r5, #0
 80003de:	4e0a      	ldr	r6, [pc, #40]	; (8000408 <__libc_init_array+0x40>)
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <__libc_init_array+0x44>)
 80003e2:	1ba4      	subs	r4, r4, r6
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f0:	4798      	blx	r3
 80003f2:	3501      	adds	r5, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003fa:	4798      	blx	r3
 80003fc:	3501      	adds	r5, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
