
I2C_Lab1_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057e  00000000  00000000  000007a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000236  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_SetAddress>:
}

void I2C_SetAddress(unsigned char SLA)
{
	//Set the slave address
	TWAR = SLA;
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	08 95       	ret

00000070 <I2C_Read>:
}

unsigned char I2C_Read(unsigned char ack)
{
	unsigned char x;
	 TWCR |= ((ack << TWEA) | (1 << TWEN) | (1 << TWINT));
  70:	96 b7       	in	r25, 0x36	; 54
  72:	40 e4       	ldi	r20, 0x40	; 64
  74:	84 9f       	mul	r24, r20
  76:	90 01       	movw	r18, r0
  78:	11 24       	eor	r1, r1
  7a:	92 2b       	or	r25, r18
  7c:	94 68       	ori	r25, 0x84	; 132
  7e:	96 bf       	out	0x36, r25	; 54
	 
	 //Wait for the TWINT flag to be set
	 while(!(TWCR & (1 << TWINT)));
  80:	06 b6       	in	r0, 0x36	; 54
  82:	07 fe       	sbrs	r0, 7
  84:	fd cf       	rjmp	.-6      	; 0x80 <I2C_Read+0x10>
  86:	01 c0       	rjmp	.+2      	; 0x8a <I2C_Read+0x1a>
	 
	 //Wait until we get the right status code
	 while(TWSR != 0x60) x = TWSR; 
  88:	91 b1       	in	r25, 0x01	; 1
  8a:	91 b1       	in	r25, 0x01	; 1
  8c:	90 36       	cpi	r25, 0x60	; 96
  8e:	e1 f7       	brne	.-8      	; 0x88 <I2C_Read+0x18>

	 TWCR |= ((ack << TWEA) | (1 << TWEN) | (1 << TWINT));
  90:	86 b7       	in	r24, 0x36	; 54
  92:	28 2b       	or	r18, r24
  94:	24 68       	ori	r18, 0x84	; 132
  96:	26 bf       	out	0x36, r18	; 54
	 
	  //Wait for the TWINT flag to be set
	  while(!(TWCR & (1 << TWINT)));
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <I2C_Read+0x28>
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <I2C_Read+0x32>
	  
	   //Wait until we get the right status code
	   while(TWSR != 0x80) x = TWSR;
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	80 38       	cpi	r24, 0x80	; 128
  a6:	e1 f7       	brne	.-8      	; 0xa0 <I2C_Read+0x30>
	   
	   return TWDR;
  a8:	83 b1       	in	r24, 0x03	; 3
  aa:	08 95       	ret

000000ac <main>:
void I2C_SetAddress(unsigned char SLA);
unsigned char I2C_Read(unsigned char ack);

int main(void)
{
    DDRA = 0xFF;	//PortA as output
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
	I2C_SetAddress(0b11010000);
  b0:	80 ed       	ldi	r24, 0xD0	; 208
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_SetAddress>
    while (1) 
    {
		PORTA = I2C_Read(1);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 38 00 	call	0x70	; 0x70 <I2C_Read>
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	fb cf       	rjmp	.-10     	; 0xb6 <main+0xa>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
